cfast_pb2
Data
p0
(tRp1
(dp2
S'serialized'
p3
S'\n\xc1\r\x08\x00B\xa0\r\x08\x06*\x94\r/*\n\n * BFS.cpp\n *\n *  Created on: Aug 26, 2015\n *      Author: user\n\n#include&lt;queue&gt;\n#include &lt;iostream&gt;\nusing namespace std;\nclass Node{\n\tint data;\n\tNode* next;\n\tfriend class Graph;\n};\nclass Graph{\n\tint vertices;\n\tNode **adj;\n\tNode* newNode(int data);\npublic:\n\tGraph(int vertex);\n\tvoid addEdge(int src,int dest);\n\tvoid addUndirectedEdge(int src,int dest);\n\tvoid BFS(int src);\n\tvoid showGraph();\n};\n\nGraph::Graph(int v){\n\tthis-&gt;vertices=v;\n\tadj=new Node*[vertices];\n\tfor(int i=0;i&lt;vertices;i++){\n\t\tadj[i]=NULL;\n\t}\n}\n\nNode* Graph::newNode(int data){\n\tNode* tmp=new Node();\n\ttmp-&gt;data=data;\n\ttmp-&gt;next=NULL;\n\treturn tmp;\n}\n\nvoid Graph::addUndirectedEdge(int src,int dest){\n\taddEdge(src,dest);\n\taddEdge(dest,src);\n}\nvoid Graph::addEdge(int src,int dest){\n\tif(adj[src]==NULL){\n\t\tadj[src]=newNode(dest);\n\t}\n\telse{\n\t\tNode *tmp=newNode(dest);\n\t\ttmp-&gt;next=adj[src];\n\t\tadj[src]=tmp;\n\t}\n}\n\nvoid Graph::showGraph(){\n\tfor(int i=0;i&lt;vertices;i++){\n\t\twhile(adj[i]){\n\t\t\tcout&lt;&lt;i&lt;&lt;" "&lt;&lt;adj[i]-&gt;data&lt;&lt;" "&lt;&lt;endl;\n\t\t\tadj[i]=adj[i]-&gt;next;\n\t\t}\n\t}\n}\n\nvoid Graph::BFS(int src){\n\tint *visited=new int[vertices];\n\tqueue&lt;int&gt; q;\n\n\tfor(int i=0;i&lt;vertices;i++){\n\t\tvisited[i]=0;\n\t}\n\n\tq.push(src);\n\twhile(!q.empty()){\n\t\tint top=q.front();\n\n\t\tcout&lt;&lt;top&lt;&lt;" ";\n\t\tvisited[top]=1;\n\t\tq.pop();\n\n\n\t\tNode *tmp=adj[top];\n\t\twhile(tmp){\n\t\t\tif(visited[tmp-&gt;data]==0){\n\n\t\t\t\t\tq.push(tmp-&gt;data);\n\t\t\t}\n\t\t\ttmp=tmp-&gt;next;\n\t\t}\n\t}\n}\n\nint main(){\n\tGraph g(4);\n\tg.addEdge(0,1);\n\tg.addEdge(0,2);\n\tg.addEdge(1,2);\n\tg.addEdge(2,0);\n\tg.addEdge(2,3);\n\tg.addEdge(3,3);\n\n\t//g.showGraph();\n\tcout&lt;&lt;endl&lt;&lt;"BFS "&lt;&lt;endl;\n\tg.BFS(2);\n}\n*/J\x01\n`\x01h\x01R\x1a\n\x0fbfs/cpp/549.cpp\x12\x050.9.5\x18\x03'
p4
sb.