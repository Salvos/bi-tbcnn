cfast_pb2
Data
p0
(tRp1
(dp2
S'serialized'
p3
S"\n\xd8K\x08\x00B\xcd\x01\x08\x06*\xc0\x01/*\n * Written by Doug Lea with assistance from members of JCP JSR-166\n * Expert Group and released to the public domain, as explained at\n * http://creativecommons.org/licenses/publicdomain\n */J\x02\n\n`\x01h\x01Bg\x08\xd0\x01*\x08package BG\x086B\x15\x086*\x04javaB\x07\x08\x89\x02`\x07h\r`\x07h\tB\x12\x084*\x01.B\x07\x08\x89\x02`\x07h\x0e`\x07h\rB\x15\x086*\x04utilB\x07\x08\x89\x02`\x07h\x12`\x07h\x0eJ\x01;B\x07\x08\x89\x02`\x07h\x13J\x02\n\n`\x07h\x01B \x08\x06*\x15// BEGIN android-noteJ\x01\n`\th\x01B8\x08\x06*-// removed link to collections framework docsJ\x01\n`\nh\x01B\x1f\x08\x06*\x13// END android-noteJ\x02\n\n`\x0bh\x01B\xb7(\x08\x06*\xab(/**\n * A collection designed for holding elements prior to processing.\n * Besides basic {@link java.util.Collection Collection} operations,\n * queues provide additional insertion, extraction, and inspection\n * operations.  Each of these methods exists in two forms: one throws\n * an exception if the operation fails, the other returns a special\n * value (either &lt;tt&gt;null&lt;/tt&gt; or &lt;tt&gt;false&lt;/tt&gt;, depending on the\n * operation).  The latter form of the insert operation is designed\n * specifically for use with capacity-restricted &lt;tt&gt;Queue&lt;/tt&gt;\n * implementations; in most implementations, insert operations cannot\n * fail.\n *\n * &lt;p&gt;\n * &lt;table BORDER CELLPADDING=3 CELLSPACING=1&gt;\n *  &lt;tr&gt;\n *    &lt;td&gt;&lt;/td&gt;\n *    &lt;td ALIGN=CENTER&gt;&lt;em&gt;Throws exception&lt;/em&gt;&lt;/td&gt;\n *    &lt;td ALIGN=CENTER&gt;&lt;em&gt;Returns special value&lt;/em&gt;&lt;/td&gt;\n *  &lt;/tr&gt;\n *  &lt;tr&gt;\n *    &lt;td&gt;&lt;b&gt;Insert&lt;/b&gt;&lt;/td&gt;\n *    &lt;td&gt;{@link #add add(e)}&lt;/td&gt;\n *    &lt;td&gt;{@link #offer offer(e)}&lt;/td&gt;\n *  &lt;/tr&gt;\n *  &lt;tr&gt;\n *    &lt;td&gt;&lt;b&gt;Remove&lt;/b&gt;&lt;/td&gt;\n *    &lt;td&gt;{@link #remove remove()}&lt;/td&gt;\n *    &lt;td&gt;{@link #poll poll()}&lt;/td&gt;\n *  &lt;/tr&gt;\n *  &lt;tr&gt;\n *    &lt;td&gt;&lt;b&gt;Examine&lt;/b&gt;&lt;/td&gt;\n *    &lt;td&gt;{@link #element element()}&lt;/td&gt;\n *    &lt;td&gt;{@link #peek peek()}&lt;/td&gt;\n *  &lt;/tr&gt;\n * &lt;/table&gt;\n *\n * &lt;p&gt;Queues typically, but do not necessarily, order elements in a\n * FIFO (first-in-first-out) manner.  Among the exceptions are\n * priority queues, which order elements according to a supplied\n * comparator, or the elements' natural ordering, and LIFO queues (or\n * stacks) which order the elements LIFO (last-in-first-out).\n * Whatever the ordering used, the &lt;em&gt;head&lt;/em&gt; of the queue is that\n * element which would be removed by a call to {@link #remove() } or\n * {@link #poll()}.  In a FIFO queue, all new elements are inserted at\n * the &lt;em&gt; tail&lt;/em&gt; of the queue. Other kinds of queues may use\n * different placement rules.  Every &lt;tt&gt;Queue&lt;/tt&gt; implementation\n * must specify its ordering properties.\n *\n * &lt;p&gt;The {@link #offer offer} method inserts an element if possible,\n * otherwise returning &lt;tt&gt;false&lt;/tt&gt;.  This differs from the {@link\n * java.util.Collection#add Collection.add} method, which can fail to\n * add an element only by throwing an unchecked exception.  The\n * &lt;tt&gt;offer&lt;/tt&gt; method is designed for use when failure is a normal,\n * rather than exceptional occurrence, for example, in fixed-capacity\n * (or &amp;quot;bounded&amp;quot;) queues.\n *\n * &lt;p&gt;The {@link #remove()} and {@link #poll()} methods remove and\n * return the head of the queue.\n * Exactly which element is removed from the queue is a\n * function of the queue's ordering policy, which differs from\n * implementation to implementation. The &lt;tt&gt;remove()&lt;/tt&gt; and\n * &lt;tt&gt;poll()&lt;/tt&gt; methods differ only in their behavior when the\n * queue is empty: the &lt;tt&gt;remove()&lt;/tt&gt; method throws an exception,\n * while the &lt;tt&gt;poll()&lt;/tt&gt; method returns &lt;tt&gt;null&lt;/tt&gt;.\n *\n * &lt;p&gt;The {@link #element()} and {@link #peek()} methods return, but do\n * not remove, the head of the queue.\n *\n * &lt;p&gt;The &lt;tt&gt;Queue&lt;/tt&gt; interface does not define the &lt;i&gt;blocking queue\n * methods&lt;/i&gt;, which are common in concurrent programming.  These methods,\n * which wait for elements to appear or for space to become available, are\n * defined in the {@link java.util.concurrent.BlockingQueue} interface, which\n * extends this interface.\n *\n * &lt;p&gt;&lt;tt&gt;Queue&lt;/tt&gt; implementations generally do not allow insertion\n * of &lt;tt&gt;null&lt;/tt&gt; elements, although some implementations, such as\n * {@link LinkedList}, do not prohibit insertion of &lt;tt&gt;null&lt;/tt&gt;.\n * Even in the implementations that permit it, &lt;tt&gt;null&lt;/tt&gt; should\n * not be inserted into a &lt;tt&gt;Queue&lt;/tt&gt;, as &lt;tt&gt;null&lt;/tt&gt; is also\n * used as a special return value by the &lt;tt&gt;poll&lt;/tt&gt; method to\n * indicate that the queue contains no elements.\n *\n * &lt;p&gt;&lt;tt&gt;Queue&lt;/tt&gt; implementations generally do not define\n * element-based versions of methods &lt;tt&gt;equals&lt;/tt&gt; and\n * &lt;tt&gt;hashCode&lt;/tt&gt; but instead inherit the identity based versions\n * from class &lt;tt&gt;Object&lt;/tt&gt;, because element-based equality is not\n * always well-defined for queues with the same elements but different\n * ordering properties.\n *\n * @see java.util.Collection\n * @see LinkedList\n * @see PriorityQueue\n * @see java.util.concurrent.LinkedBlockingQueue\n * @see java.util.concurrent.BlockingQueue\n * @see java.util.concurrent.ArrayBlockingQueue\n * @see java.util.concurrent.LinkedBlockingQueue\n * @see java.util.concurrent.PriorityBlockingQueue\n * @since 1.5\n * @author Doug Lea\n * @param &lt;E&gt; the type of elements held in this collection\n */J\x01\n`\rh\x01B\xc3\x1f\x08\xd2\x01B%\x08\xba\x02*\x06publicB\x07\x08\x89\x02`rh\x07J\x0b interface `rh\x01BR\x086B\x16\x086*\x05QueueB\x07\x08\x89\x02`rh\x17`rh\x12B3\x08d*\x04&lt;B\x1c\x08eB\x12\x086*\x01EB\x07\x08\x89\x02`rh\x19`rh\x18J\x04&gt;B\x07\x08\x89\x02`rh\x1d`rh\x17J\x01 Bo\x08\xd1\x02Bg\x08\xce\x01*\x08extends BT\x086B\x1b\x086*\nCollectionB\x07\x08\x89\x02`rh-`rh#B3\x08h*\x04&lt;B\x1c\x08iB\x12\x086*\x01EB\x07\x08\x89\x02`rh/`rh.J\x04&gt;B\x07\x08\x89\x02`rh3`rh-`rh\x1bJ\x01 B\xce\x1d\x08<*\x06{\n    B\xc4\x07\x08\x06*\xb4\x07/**\n     * Inserts the specified element into this queue if it is possible to do so\n     * immediately without violating capacity restrictions, returning\n     * &lt;tt&gt;true&lt;/tt&gt; upon success and throwing an &lt;tt&gt;IllegalStateException&lt;/tt&gt;\n     * if no space is currently available.\n     *\n     * @param e the element to add\n     * @return &lt;tt&gt;true&lt;/tt&gt; (as specified by {@link Collection#add})\n     * @throws IllegalStateException if the element cannot be added at this\n     *         time due to capacity restrictions\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this queue\n     * @throws NullPointerException if the specified element is null and\n     *         this queue does not permit null elements\n     * @throws IllegalArgumentException if some property of this element\n     *         prevents it from being added to this queue\n     */J\x05\n    `sh\x05B\xa6\x01\x08\rB!\x089B\x1a\x086*\x07booleanB\x08\x08\x89\x02`\x84\x01h\x0c`\x84\x01h\x05J\x01 B\x16\x086*\x03addB\x08\x08\x89\x02`\x84\x01h\x10`\x84\x01h\rBU\x08d*\x01(B<\x08eB5\x08\x01B\x1b\x089B\x14\x086*\x01EB\x08\x08\x89\x02`\x84\x01h\x12`\x84\x01h\x11J\x01 B\x14\x086*\x01eB\x08\x08\x89\x02`\x84\x01h\x14`\x84\x01h\x13J\x01)B\x08\x08\x89\x02`\x84\x01h\x15J\x01;`\x84\x01h\x10B\x08\x08\x89\x02`\x84\x01h\x16J\x06\n\n    B\x8d\x07\x08\x06*\xfc\x06/**\n     * Inserts the specified element into this queue if it is possible to do\n     * so immediately without violating capacity restrictions.\n     * When using a capacity-restricted queue, this method is generally\n     * preferable to {@link #add}, which can fail to insert an element only\n     * by throwing an exception.\n     *\n     * @param e the element to add\n     * @return &lt;tt&gt;true&lt;/tt&gt; if the element was added to this queue, else\n     *         &lt;tt&gt;false&lt;/tt&gt;\n     * @throws ClassCastException if the class of the specified element\n     *         prevents it from being added to this queue\n     * @throws NullPointerException if the specified element is null and\n     *         this queue does not permit null elements\n     * @throws IllegalArgumentException if some property of this element\n     *         prevents it from being added to this queue\n     */J\x05\n    `\x86\x01h\x05B\xa8\x01\x08\rB!\x089B\x1a\x086*\x07booleanB\x08\x08\x89\x02`\x97\x01h\x0c`\x97\x01h\x05J\x01 B\x18\x086*\x05offerB\x08\x08\x89\x02`\x97\x01h\x12`\x97\x01h\rBU\x08d*\x01(B<\x08eB5\x08\x01B\x1b\x089B\x14\x086*\x01EB\x08\x08\x89\x02`\x97\x01h\x14`\x97\x01h\x13J\x01 B\x14\x086*\x01eB\x08\x08\x89\x02`\x97\x01h\x16`\x97\x01h\x15J\x01)B\x08\x08\x89\x02`\x97\x01h\x17J\x01;`\x97\x01h\x12B\x08\x08\x89\x02`\x97\x01h\x18J\x06\n\n    B\xb2\x02\x08\x06*\xa1\x02/**\n     * Retrieves and removes the head of this queue.  This method differs\n     * from {@link #poll poll} only in that it throws an exception if this\n     * queue is empty.\n     *\n     * @return the head of this queue\n     * @throws NoSuchElementException if this queue is empty\n     */J\x05\n    `\x99\x01h\x05Bf\x08\rB\x1b\x089B\x14\x086*\x01EB\x08\x08\x89\x02`\xa1\x01h\x06`\xa1\x01h\x05J\x01 B\x19\x086*\x06removeB\x08\x08\x89\x02`\xa1\x01h\r`\xa1\x01h\x07B\x18\x08d*\x02()B\x08\x08\x89\x02`\xa1\x01h\x0fJ\x01;`\xa1\x01h\rB\x08\x08\x89\x02`\xa1\x01h\x10J\x06\n\n    B\xf7\x01\x08\x06*\xe6\x01/**\n     * Retrieves and removes the head of this queue,\n     * or returns &lt;tt&gt;null&lt;/tt&gt; if this queue is empty.\n     *\n     * @return the head of this queue, or &lt;tt&gt;null&lt;/tt&gt; if this queue is empty\n     */J\x05\n    `\xa3\x01h\x05Bd\x08\rB\x1b\x089B\x14\x086*\x01EB\x08\x08\x89\x02`\xa9\x01h\x06`\xa9\x01h\x05J\x01 B\x17\x086*\x04pollB\x08\x08\x89\x02`\xa9\x01h\x0b`\xa9\x01h\x07B\x18\x08d*\x02()B\x08\x08\x89\x02`\xa9\x01h\rJ\x01;`\xa9\x01h\x0bB\x08\x08\x89\x02`\xa9\x01h\x0eJ\x06\n\n    B\xbc\x02\x08\x06*\xab\x02/**\n     * Retrieves, but does not remove, the head of this queue.  This method\n     * differs from {@link #peek peek} only in that it throws an exception\n     * if this queue is empty.\n     *\n     * @return the head of this queue\n     * @throws NoSuchElementException if this queue is empty\n     */J\x05\n    `\xab\x01h\x05Bg\x08\rB\x1b\x089B\x14\x086*\x01EB\x08\x08\x89\x02`\xb3\x01h\x06`\xb3\x01h\x05J\x01 B\x1a\x086*\x07elementB\x08\x08\x89\x02`\xb3\x01h\x0e`\xb3\x01h\x07B\x18\x08d*\x02()B\x08\x08\x89\x02`\xb3\x01h\x10J\x01;`\xb3\x01h\x0eB\x08\x08\x89\x02`\xb3\x01h\x11J\x06\n\n    B\x81\x02\x08\x06*\xf0\x01/**\n     * Retrieves, but does not remove, the head of this queue,\n     * or returns &lt;tt&gt;null&lt;/tt&gt; if this queue is empty.\n     *\n     * @return the head of this queue, or &lt;tt&gt;null&lt;/tt&gt; if this queue is empty\n     */J\x05\n    `\xb5\x01h\x05B`\x08\rB\x1b\x089B\x14\x086*\x01EB\x08\x08\x89\x02`\xbb\x01h\x06`\xbb\x01h\x05J\x01 B\x17\x086*\x04peekB\x08\x08\x89\x02`\xbb\x01h\x0b`\xbb\x01h\x07B\x18\x08d*\x02()B\x08\x08\x89\x02`\xbb\x01h\rJ\x01;`\xbb\x01h\x0bB\x08\x08\x89\x02`\xbb\x01h\x0eJ\x02\n}B\x08\x08\x89\x02`\xbc\x01h\x02`rh1J\x01\nR\x1e\n\x13queue/java/359.java\x12\x050.9.5\x18\x06"
p4
sb.